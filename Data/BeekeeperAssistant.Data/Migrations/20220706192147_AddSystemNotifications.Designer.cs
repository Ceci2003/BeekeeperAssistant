// <auto-generated />
using System;
using BeekeeperAssistant.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BeekeeperAssistant.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220706192147_AddSystemNotifications")]
    partial class AddSystemNotifications
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("ApplicationUserDuty", b =>
                {
                    b.Property<int>("TasksId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TasksId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ApplicationUserDuty");
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.Apiary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ApiaryType")
                        .HasColumnType("int");

                    b.Property<DateTime>("ClosingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsBookMarked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRegistered")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OpeningDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Apiaries");
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.ApiaryDiary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ApiaryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiendById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ApiaryId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ModifiendById");

                    b.ToTable("ApiariesDiaries");
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.ApiaryHelper", b =>
                {
                    b.Property<int>("ApiaryId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Access")
                        .HasColumnType("int");

                    b.HasKey("ApiaryId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ApiaryHelpers");
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.ApiaryNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ApiaryId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiendById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApiaryId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ModifiendById");

                    b.ToTable("ApiaryNotes");
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.Beehive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ApiaryId")
                        .HasColumnType("int");

                    b.Property<int>("BeehivePower")
                        .HasColumnType("int");

                    b.Property<int>("BeehiveSystem")
                        .HasColumnType("int");

                    b.Property<int>("BeehiveType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasDevice")
                        .HasColumnType("bit");

                    b.Property<bool>("HasPolenCatcher")
                        .HasColumnType("bit");

                    b.Property<bool>("HasPropolisCatcher")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBookMarked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsItMovable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("QueenId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApiaryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("OwnerId");

                    b.ToTable("Beehives");
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.BeehiveDiary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BeehiveId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiendById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BeehiveId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ModifiendById");

                    b.ToTable("BeehivesDiaries");
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.BeehiveHelper", b =>
                {
                    b.Property<int>("BeehiveId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Access")
                        .HasColumnType("int");

                    b.HasKey("BeehiveId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("BeehivesHelpers");
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.BeehiveMarkFlag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BeehiveId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("FlagType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BeehiveId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("BeehivesMarkFlags");
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.BeehiveNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BeehiveId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiendById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BeehiveId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ModifiendById");

                    b.ToTable("BeehiveNotes");
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.Duty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Duties");
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("FeedbackType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.Harvest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateOfHarves")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("HarvestName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HarvestProductType")
                        .HasColumnType("int");

                    b.Property<int>("HoneyType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("OwnerId");

                    b.ToTable("Harvests");
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.HarvestedBeehive", b =>
                {
                    b.Property<int>("BeehiveId")
                        .HasColumnType("int");

                    b.Property<int>("HarvestId")
                        .HasColumnType("int");

                    b.HasKey("BeehiveId", "HarvestId");

                    b.HasIndex("HarvestId");

                    b.ToTable("HarvestedBeehives");
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.Inspection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BeeActivity")
                        .HasColumnType("int");

                    b.Property<int>("BeehiveAction")
                        .HasColumnType("int");

                    b.Property<int>("BeehiveId")
                        .HasColumnType("int");

                    b.Property<int>("BeehivePower")
                        .HasColumnType("int");

                    b.Property<int>("BeehiveTemperament")
                        .HasColumnType("int");

                    b.Property<int>("BeesPerMinute")
                        .HasColumnType("int");

                    b.Property<bool>("ClappedBrood")
                        .HasColumnType("bit");

                    b.Property<string>("Conditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateOfInspection")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Disease")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Eggs")
                        .HasColumnType("bit");

                    b.Property<int>("ForragingActivity")
                        .HasColumnType("int");

                    b.Property<int>("FramesWithBees")
                        .HasColumnType("int");

                    b.Property<int>("FramesWithBrood")
                        .HasColumnType("int");

                    b.Property<int>("FramesWithHoney")
                        .HasColumnType("int");

                    b.Property<int>("FramesWithPollen")
                        .HasColumnType("int");

                    b.Property<double>("HiveHumidity")
                        .HasColumnType("float");

                    b.Property<double>("HiveTemperature")
                        .HasColumnType("float");

                    b.Property<bool>("IncludeActivity")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludeBrood")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludeFramesWith")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludeQueenSection")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludeSpottedProblem")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludeStorage")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludeWeatherInfo")
                        .HasColumnType("bit");

                    b.Property<int>("InspectionType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrientationActivity")
                        .HasColumnType("int");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Pests")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PollenActivity")
                        .HasColumnType("int");

                    b.Property<string>("Predators")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QueenCells")
                        .HasColumnType("int");

                    b.Property<int>("QueenPowerStatus")
                        .HasColumnType("int");

                    b.Property<bool>("QueenSeen")
                        .HasColumnType("bit");

                    b.Property<int>("QueenWorkingStatus")
                        .HasColumnType("int");

                    b.Property<int>("StoredHoney")
                        .HasColumnType("int");

                    b.Property<int>("StoredPollen")
                        .HasColumnType("int");

                    b.Property<bool>("Swarmed")
                        .HasColumnType("bit");

                    b.Property<string>("Treatment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UnclappedBrood")
                        .HasColumnType("bit");

                    b.Property<double>("WeatherHumidity")
                        .HasColumnType("float");

                    b.Property<double>("WeatherTemperature")
                        .HasColumnType("float");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BeehiveId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("OwnerId");

                    b.ToTable("Inspections");
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.Queen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BeehiveId")
                        .HasColumnType("int");

                    b.Property<int>("Breed")
                        .HasColumnType("int");

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FertilizationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("GivingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HygenicHabits")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBookMarked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Origin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("QueenType")
                        .HasColumnType("int");

                    b.Property<string>("Temperament")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BeehiveId")
                        .IsUnique();

                    b.HasIndex("CreatorId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("OwnerId");

                    b.ToTable("Queens");
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.QueenHelper", b =>
                {
                    b.Property<int>("QueenId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Access")
                        .HasColumnType("int");

                    b.HasKey("QueenId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("QueensHelpers");
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.SystemNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("SystemNotifications");
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.TemporaryApiaryBeehive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ApiaryId")
                        .HasColumnType("int");

                    b.Property<int>("BeehiveId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApiaryId");

                    b.HasIndex("BeehiveId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("TemporaryApiariesBeehives");
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.TreatedBeehive", b =>
                {
                    b.Property<int>("BeehiveId")
                        .HasColumnType("int");

                    b.Property<int>("TreatmentId")
                        .HasColumnType("int");

                    b.HasKey("BeehiveId", "TreatmentId");

                    b.HasIndex("TreatmentId");

                    b.ToTable("TreatedBeehives");
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.Treatment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateOfTreatment")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Disease")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Dose")
                        .HasColumnType("int");

                    b.Property<int>("InputAs")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Medication")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("OwnerId");

                    b.ToTable("Treatments");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ApplicationUserDuty", b =>
                {
                    b.HasOne("BeekeeperAssistant.Data.Models.Duty", null)
                        .WithMany()
                        .HasForeignKey("TasksId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BeekeeperAssistant.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.Apiary", b =>
                {
                    b.HasOne("BeekeeperAssistant.Data.Models.ApplicationUser", "Creator")
                        .WithMany("Apiaries")
                        .HasForeignKey("CreatorId");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.ApiaryDiary", b =>
                {
                    b.HasOne("BeekeeperAssistant.Data.Models.Apiary", "Apiary")
                        .WithMany()
                        .HasForeignKey("ApiaryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BeekeeperAssistant.Data.Models.ApplicationUser", "ModifiendBy")
                        .WithMany()
                        .HasForeignKey("ModifiendById");

                    b.Navigation("Apiary");

                    b.Navigation("ModifiendBy");
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.ApiaryHelper", b =>
                {
                    b.HasOne("BeekeeperAssistant.Data.Models.Apiary", "Apiary")
                        .WithMany("ApiaryHelpers")
                        .HasForeignKey("ApiaryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BeekeeperAssistant.Data.Models.ApplicationUser", "User")
                        .WithMany("ApiaryHelpers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Apiary");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.ApiaryNote", b =>
                {
                    b.HasOne("BeekeeperAssistant.Data.Models.Apiary", "Apiary")
                        .WithMany()
                        .HasForeignKey("ApiaryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BeekeeperAssistant.Data.Models.ApplicationUser", "ModifiendBy")
                        .WithMany()
                        .HasForeignKey("ModifiendById");

                    b.Navigation("Apiary");

                    b.Navigation("ModifiendBy");
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.Beehive", b =>
                {
                    b.HasOne("BeekeeperAssistant.Data.Models.Apiary", "Apiary")
                        .WithMany("Beehives")
                        .HasForeignKey("ApiaryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BeekeeperAssistant.Data.Models.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("BeekeeperAssistant.Data.Models.ApplicationUser", "Owner")
                        .WithMany("Beehives")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Apiary");

                    b.Navigation("Creator");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.BeehiveDiary", b =>
                {
                    b.HasOne("BeekeeperAssistant.Data.Models.Beehive", "Beehive")
                        .WithMany()
                        .HasForeignKey("BeehiveId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BeekeeperAssistant.Data.Models.ApplicationUser", "ModifiendBy")
                        .WithMany()
                        .HasForeignKey("ModifiendById");

                    b.Navigation("Beehive");

                    b.Navigation("ModifiendBy");
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.BeehiveHelper", b =>
                {
                    b.HasOne("BeekeeperAssistant.Data.Models.Beehive", "Beehive")
                        .WithMany("BeehiveHelpers")
                        .HasForeignKey("BeehiveId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BeekeeperAssistant.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Beehive");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.BeehiveMarkFlag", b =>
                {
                    b.HasOne("BeekeeperAssistant.Data.Models.Beehive", "Beehive")
                        .WithMany()
                        .HasForeignKey("BeehiveId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Beehive");
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.BeehiveNote", b =>
                {
                    b.HasOne("BeekeeperAssistant.Data.Models.Beehive", "Beehive")
                        .WithMany("BeehiveNotes")
                        .HasForeignKey("BeehiveId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BeekeeperAssistant.Data.Models.ApplicationUser", "ModifiendBy")
                        .WithMany()
                        .HasForeignKey("ModifiendById");

                    b.Navigation("Beehive");

                    b.Navigation("ModifiendBy");
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.Feedback", b =>
                {
                    b.HasOne("BeekeeperAssistant.Data.Models.ApplicationUser", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.Harvest", b =>
                {
                    b.HasOne("BeekeeperAssistant.Data.Models.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("BeekeeperAssistant.Data.Models.ApplicationUser", "Owner")
                        .WithMany("Harvests")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Creator");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.HarvestedBeehive", b =>
                {
                    b.HasOne("BeekeeperAssistant.Data.Models.Beehive", "Beehive")
                        .WithMany("HarvestedBeehives")
                        .HasForeignKey("BeehiveId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BeekeeperAssistant.Data.Models.Harvest", "Harvest")
                        .WithMany("HarvestedBeehives")
                        .HasForeignKey("HarvestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Beehive");

                    b.Navigation("Harvest");
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.Inspection", b =>
                {
                    b.HasOne("BeekeeperAssistant.Data.Models.Beehive", "Beehive")
                        .WithMany("Inspections")
                        .HasForeignKey("BeehiveId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BeekeeperAssistant.Data.Models.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("BeekeeperAssistant.Data.Models.ApplicationUser", "Owner")
                        .WithMany("Inspections")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Beehive");

                    b.Navigation("Creator");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.Queen", b =>
                {
                    b.HasOne("BeekeeperAssistant.Data.Models.Beehive", "Beehive")
                        .WithOne("Queen")
                        .HasForeignKey("BeekeeperAssistant.Data.Models.Queen", "BeehiveId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BeekeeperAssistant.Data.Models.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("BeekeeperAssistant.Data.Models.ApplicationUser", "Owner")
                        .WithMany("Queens")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Beehive");

                    b.Navigation("Creator");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.QueenHelper", b =>
                {
                    b.HasOne("BeekeeperAssistant.Data.Models.Queen", "Queen")
                        .WithMany("QueenHelpers")
                        .HasForeignKey("QueenId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BeekeeperAssistant.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Queen");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.SystemNotification", b =>
                {
                    b.HasOne("BeekeeperAssistant.Data.Models.ApplicationUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.TemporaryApiaryBeehive", b =>
                {
                    b.HasOne("BeekeeperAssistant.Data.Models.Apiary", "Apiary")
                        .WithMany()
                        .HasForeignKey("ApiaryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BeekeeperAssistant.Data.Models.Beehive", "Beehive")
                        .WithMany()
                        .HasForeignKey("BeehiveId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Apiary");

                    b.Navigation("Beehive");
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.TreatedBeehive", b =>
                {
                    b.HasOne("BeekeeperAssistant.Data.Models.Beehive", "Beehive")
                        .WithMany("TreatedBeehives")
                        .HasForeignKey("BeehiveId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BeekeeperAssistant.Data.Models.Treatment", "Treatment")
                        .WithMany("TreatedBeehives")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Beehive");

                    b.Navigation("Treatment");
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.Treatment", b =>
                {
                    b.HasOne("BeekeeperAssistant.Data.Models.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("BeekeeperAssistant.Data.Models.ApplicationUser", "Owner")
                        .WithMany("Treatments")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Creator");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("BeekeeperAssistant.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BeekeeperAssistant.Data.Models.ApplicationUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BeekeeperAssistant.Data.Models.ApplicationUser", null)
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("BeekeeperAssistant.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BeekeeperAssistant.Data.Models.ApplicationUser", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BeekeeperAssistant.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.Apiary", b =>
                {
                    b.Navigation("ApiaryHelpers");

                    b.Navigation("Beehives");
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Apiaries");

                    b.Navigation("ApiaryHelpers");

                    b.Navigation("Beehives");

                    b.Navigation("Claims");

                    b.Navigation("Feedbacks");

                    b.Navigation("Harvests");

                    b.Navigation("Inspections");

                    b.Navigation("Logins");

                    b.Navigation("Queens");

                    b.Navigation("Roles");

                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.Beehive", b =>
                {
                    b.Navigation("BeehiveHelpers");

                    b.Navigation("BeehiveNotes");

                    b.Navigation("HarvestedBeehives");

                    b.Navigation("Inspections");

                    b.Navigation("Queen");

                    b.Navigation("TreatedBeehives");
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.Harvest", b =>
                {
                    b.Navigation("HarvestedBeehives");
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.Queen", b =>
                {
                    b.Navigation("QueenHelpers");
                });

            modelBuilder.Entity("BeekeeperAssistant.Data.Models.Treatment", b =>
                {
                    b.Navigation("TreatedBeehives");
                });
#pragma warning restore 612, 618
        }
    }
}
